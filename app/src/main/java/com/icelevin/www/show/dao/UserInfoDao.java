package com.icelevin.www.show.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.icelevin.www.show.model.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Void> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SexName = new Property(0, String.class, "sexName", false, "SEX_NAME");
        public final static Property Sex = new Property(1, int.class, "Sex", false, "SEX");
        public final static Property QqNum = new Property(2, String.class, "qqNum", false, "QQ_NUM");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property IconHead = new Property(6, String.class, "iconHead", false, "ICON_HEAD");
        public final static Property IsLogin = new Property(7, boolean.class, "isLogin", false, "IS_LOGIN");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"SEX_NAME\" TEXT," + // 0: sexName
                "\"SEX\" INTEGER NOT NULL ," + // 1: Sex
                "\"QQ_NUM\" TEXT," + // 2: qqNum
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"ADDRESS\" TEXT," + // 5: address
                "\"ICON_HEAD\" TEXT," + // 6: iconHead
                "\"IS_LOGIN\" INTEGER NOT NULL );"); // 7: isLogin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String sexName = entity.getSexName();
        if (sexName != null) {
            stmt.bindString(1, sexName);
        }
        stmt.bindLong(2, entity.getSex());
 
        String qqNum = entity.getQqNum();
        if (qqNum != null) {
            stmt.bindString(3, qqNum);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String iconHead = entity.getIconHead();
        if (iconHead != null) {
            stmt.bindString(7, iconHead);
        }
        stmt.bindLong(8, entity.getIsLogin() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String sexName = entity.getSexName();
        if (sexName != null) {
            stmt.bindString(1, sexName);
        }
        stmt.bindLong(2, entity.getSex());
 
        String qqNum = entity.getQqNum();
        if (qqNum != null) {
            stmt.bindString(3, qqNum);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String iconHead = entity.getIconHead();
        if (iconHead != null) {
            stmt.bindString(7, iconHead);
        }
        stmt.bindLong(8, entity.getIsLogin() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sexName
            cursor.getInt(offset + 1), // Sex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qqNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iconHead
            cursor.getShort(offset + 7) != 0 // isLogin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setSexName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSex(cursor.getInt(offset + 1));
        entity.setQqNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIconHead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLogin(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
